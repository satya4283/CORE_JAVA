package com.library.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.library.entity.Books;
import com.library.service.BooksService;

@RestController
@CrossOrigin("http://localhost:3000")
public class BookController {
	
	@Autowired
	BooksService bookservice;

	@RequestMapping("")
	public String run() {
		return "hi";
	}
	// add book handler
	@PostMapping("/add")
	public String addBook(@RequestBody Books b) {
		System.out.println("data" + b);
		return bookservice.addBook(b);
	}

	// fetching books handler
	@GetMapping("/data")
	public List<Books> data() {
		return bookservice.getAllBooks();
	}

	@DeleteMapping("/delete/{id}")
	public String delete(@PathVariable Integer id) {
		return bookservice.deleteBook(id);
	}

	@DeleteMapping("/delete")
	public String deleteall() {
		return bookservice.deleteall();
	}

		// update book handler
	
	@PutMapping("/update/{bookId}")
	public Books updateBook(@PathVariable("bookId") int bookId, @RequestBody Books book) {
		this.bookservice.updateBook(book, bookId);
		return book;
	}
	
	
	@PostMapping("/upload-file")
	public ResponseEntity<String> uploadFile(@RequestParam("file") MultipartFile file){
		
		System.out.println(file.getName());
		System.out.println(file.getOriginalFilename());
		System.out.println(file.getContentType());
		System.out.println(file.getSize());
		return ResponseEntity.ok("working");
	}

}
-------------------------------------------------------------------------------------------
package com.Books.entity;

import java.util.Arrays;

import javax.print.DocFlavor.BYTE_ARRAY;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Lob;
import jakarta.persistence.Table;

@Entity
@Table(name="BookFile")
public class Book {
	
	@Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long bookId;

    private String bookName;
    private double bookPrice;
    private String bookAuthor;

    @Lob 
    @Column(name="uploadPdfFile", columnDefinition="BLOB NOT NULL")
    private BYTE_ARRAY[] uploadPdfFile;

	public Long getBookId() {
		return bookId;
	}

	public void setBookId(Long bookId) {
		this.bookId = bookId;
	}

	public String getBookName() {
		return bookName;
	}

	public void setBookName(String bookName) {
		this.bookName = bookName;
	}

	public double getBookPrice() {
		return bookPrice;
	}

	public void setBookPrice(double bookPrice) {
		this.bookPrice = bookPrice;
	}

	public String getBookAuthor() {
		return bookAuthor;
	}

	public void setBookAuthor(String bookAuthor) {
		this.bookAuthor = bookAuthor;
	}

	public BYTE_ARRAY[] getBookFile() {
		return uploadPdfFile;
	}

	public void setBookFile(byte[] bookFile) {
		this.uploadPdfFile = uploadPdfFile;
	}

	public Book(Long bookId, String bookName, double bookPrice, String bookAuthor, BYTE_ARRAY[] uploadPdfFile) {
		super();
		this.bookId = bookId;
		this.bookName = bookName;
		this.bookPrice = bookPrice;
		this.bookAuthor = bookAuthor;
		this.uploadPdfFile = uploadPdfFile;
	}

	public Book() {
		super();
		// TODO Auto-generated constructor stub
	}
    
}

---------------------------------------------------------------------


package com.library.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import com.library.DAO.BookRepository;
import com.library.entity.Books;

import jakarta.transaction.Transactional;

@Service
@Transactional

public class BooksService {

	@Autowired
	BookRepository booksrepo;

	public String addBook(Books b) {
		booksrepo.save(b);
		return "success";
	}
	//get all books
	
	public List<Books> getAllBooks() {
		return (List<Books>) booksrepo.findAll();
	}

	// get single book by id
	public Books getBookById(int id) {
		return this.booksrepo.findById(id);
	}
	
	// delete all books
	public String deleteall() {
		booksrepo.deleteAll();
		return "deleted";
	}
	
	// delete single book by id
	public String deleteBook(Integer id) {
		booksrepo.deleteById(id);
		return "deleted";
	}
	
	// update the book
	public void updateBook(Books book, int bookId) {
		book.setBookId(bookId);
		this.booksrepo.save(book);
	}

		
	

}
-------------------------------------------------------------------------
# multipart configuration


#enabling multipart uploads
#spring.servlet.multipart.enabled=true

#max file size
#spring.servlet.multipart.max-file-size=300MB

# threshold after which files are written to disk
#spring.servlet.multipart.file-size-threshold=1KB





spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/library
spring.datasource.username=root
spring.datasource.password=Database@123
spring.jpa.show-sql=true

spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
------------------------------------------------------------------------------------------------

